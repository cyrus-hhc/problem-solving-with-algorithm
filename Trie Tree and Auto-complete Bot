{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "19edd8",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "Before you turn this problem in, make sure everything runs as expected. First, **restart the kernel** (in the menubar, select Kernel$\\rightarrow$Restart) and then **run all cells** (in the menubar, select Cell$\\rightarrow$Run All).\n",
    "\n",
    "Make sure you fill in any place that says `YOUR CODE HERE` or \"YOUR ANSWER HERE\", as well as your name and collaborators below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-e7e779c9812636b7",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "NAME = \"Cyrus Chuang\"\n",
    "COLLABORATORS = \"Eric Chang, Anosha Rahim\" "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-f3f7defeea63d511",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-14e3f4bcbe37fc5b",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "# CS110 Fall 2020 - Assignment 3\n",
    "# Trie trees\n",
    "\n",
    "**Fell free to add more cells to the ones always provided in each question to expand your answers, as needed. Make sure to refer to the [CS110 course guide](https://drive.google.com/file/d/1NUeMvAiGGMjif8IgLZjvwvwwzjBEx9Q0/view?pli=1) on the grading guidelines, namely how many HC identifications and applications you are expected to include in each assignment.**\n",
    "\n",
    "Throughout the assignment, key **\"checklist items\"** you have to implement or answer are bolded, while *hints* and other interesting accompanying notes are written in italics to help you navigate the text.\n",
    "\n",
    "If you have any questions, do not hesitate to reach out to the TAs in the Slack channel \"#cs110-algo-f20\", or come to one of your instructors' OHs.\n",
    "\n",
    "### Submission Materials\n",
    "Your assignment submission needs to include the following resources:\n",
    "1. A PDF file must be the first resource and it will be created from the Jupyter notebook template provided in these instructions. Please make sure to use the same function names as the ones provided in the template. If your name is “Dumbledore”, your PDF should be named “Dumbledore.pdf”.\n",
    "2. Your second resource must be a single Python/Jupyter Notebook named “Dumbledore.ipynb”. You can also submit a zip file that includes your Jupyter notebook, but please make sure to name it “Dumbledore.zip” (if your name is Dumbledore!).\n",
    "\n",
    "## Question 0 [#responsibility]\n",
    "\n",
    "Take a screenshot of your CS110 dashboard on Forum where the following is visible:\n",
    "* your name.\n",
    "* your absences for the course have been set to excused up to the end of week 9 (inclusively).\n",
    "\n",
    "This will be evidence that you have submitted acceptable pre-class and make-up work\n",
    "for a CS110 session you may have missed. Check the specific CS110 make-up and\n",
    "pre-class policies in the syllabus of the course."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-5798297773c8b032",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "Image(filename=\"Screen Shot 2020-11-22 at 10.51.22 AM.png\")"
   ]
  },
  {
   "attachments": {
    "tries01.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-b95721e867549681",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Overview\n",
    "\n",
    "Auto-completion functionalities are now ubiquitous in search engines, document editors, and messaging apps. How would you go about developing an algorithmic strategy to implement these computational solutions? In this assignment, you will learn about a new data structure and use it to build an auto-complete engine. Each question in the assignment guides you closer to that objective while encouraging you to contrast this novel data structure to the other ones we have discussed in class.\n",
    "\n",
    "A [trie tree](https://en.wikipedia.org/wiki/Trie), or a prefix tree, is a common data structure that stores a set of strings in a collection of nodes so that all strings with a common prefix are found in the same branch of the tree. Each node is associated with a letter, and as you traverse down the tree, you pick up more letters, eventually forming a word. Complete words are commonly found on the leaf nodes. However, some inner nodes can also mark full words.\n",
    "\n",
    "Let’s use an example diagram to illustrate several important features of tries:\n",
    "\n",
    "![tries01.png](attachment:tries01.png)\n",
    "\n",
    "- Nodes that mark valid words are marked in yellow. Notice that while all leaves are considered valid words, only some inner nodes contain valid words, while some remain only prefixes to valid words appearing down the branch.\n",
    "\n",
    "- The tree does not have to be balanced, and the height of different branches depends on its contents.\n",
    "\n",
    "- In our implementation, branches never merge to show common suffixes (for example, both ANT and ART end in T, but these nodes are kept separate in their respective branches). However, this is a common first line of memory optimization for tries.\n",
    "\n",
    "- The first node contains an empty string; it “holds the tree together.”\n",
    "\n",
    "Your task in this assignment will be to implement a functional trie tree. You will be able to insert words into a dictionary, lookup valid and invalid words, print your dictionary in alphabetical order, and suggest appropriate suffixes like an auto-complete bot.\n",
    "\n",
    "The assignment questions will guide you through these tasks one by one. To stay safe from breaking your own code, and to reinforce the idea of code versioning, under each new question first **copy your previous (working) code**, and only then **implement the new feature**. The code skeletons provided throughout will make this easier for you at the cost of repeating some large portions of code."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-819415e8038f6a91",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Q1: Implement a trie tree [#PythonProgramming, #CodeReadability, #DataStructures]\n",
    "\n",
    "In this question, you will write Python code that can take a set/list/tuple of strings and insert them into a trie tree and lookup whether a specific word/string is present in the trie tree.\n",
    "\n",
    "### Q1a: Theoretical pondering\n",
    "\n",
    "Two main approaches to building trees, you might recall from class, are making separate Tree and Node classes, or only making a Node class. Which method do you think is a better fit for trie trees, and why? Justify your reasoning in around 100 words."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-4e464655d6bebd29",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    "I would choose seperating the two different classes. The reason is that, a Node and a Tree would take on different attributes as well as different method. Semantically, if we mix them in one class, it would be hard for users to undertand the code. For example, when we initiate a node, if we already insert it into the tree, it could be confusing that we are creating a node while creating a tree. Moreover, considering that we are taking a string of words, it would be hard to say that we are turning a string of words into a \"Node\" object that is in fact take the structure of a tree.   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-4cf53874138c22a2",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Q1b: Practical implementation\n",
    "\n",
    "*However, as often happens in the life of a software engineer, the general structure of code has already been determined for you. (The reasons this commonly happens are beyond the scope of this assignment, but they could include someone having written tests for you in a [TDD environment](https://en.wikipedia.org/wiki/Test-driven_development) which have a specific structure, or the need to comply with an older codebase.)*\n",
    "\n",
    "Specifically, **implement a Node class**, which will store the information relevant to each of the trie nodes. It doesn’t have to include any methods, but you will likely find out several attributes that are necessary for a successful implementation.\n",
    "\n",
    "Alongside this **create a Trie class**, which will represent the tree as a whole. Upon its initiation, the Trie class will create the root Node of the trie.\n",
    "\n",
    "For the Trie class, write **insert()** and **lookup()** methods, which will insert a word into the trie tree and look it up, respectively. Use the code skeleton below and examine the specifications of its docstrings to guide you on the details of inputs and outputs to each method.\n",
    "\n",
    "Finally, make sure that the trie can be **initiated with a wordbank as an input**. This means that a user can create a trie and feed it an initial dictionary of words (e.g. trie = Trie(wordlist)), which will be automatically inserted into the trie upon its creation. Likely, this will mean that your __init__() has to make some calls to your insert().\n",
    "\n",
    "Several test cases have been provided for your convenience and these include some, but not all, possible edge cases. If the implementation is correct, your code will pass all the tests. In addition, create at least **three more tests** to demonstrate that your code is working correctly and justify why such test cases are appropriate.\n",
    "\n",
    "Use as many code cells on this as you deem necessary. The first cell with the docstrings is locked to prevent accidental deletion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-4ff3cb687e6c8471",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "class Node_Q1:\n",
    "    \"\"\"This class represents one node of a trie tree.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    The parameters for the Node class are not predetermined.\n",
    "    However, you will likely need to create one or more of them.\n",
    "    \"\"\"\n",
    "    def __init__(self,name): \n",
    "        #Here we create a list to store the children of the nodes\n",
    "        self.children = []\n",
    "        #Here, we store the word in the .value() attribute\n",
    "        self.value = name\n",
    "        #Here, we store Boolean value of whether this code contains the alphabet that is at the end of the word\n",
    "        self.endofword = False\n",
    "        \n",
    "class Trie_Q1:\n",
    "    \"\"\"This class represents the entirety of a trie tree.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    The parameters for Trie's __init__ are not predetermined.\n",
    "    However, you will likely need one or more of them.    \n",
    "    \n",
    "    Methods\n",
    "    -------\n",
    "    insert(self, word)\n",
    "        Inserts a word into the trie, creating nodes as required.\n",
    "    lookup(self, word)\n",
    "        Determines whether a given word is present in the trie.\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, word_list = None):\n",
    "        \"\"\"Creates the Trie instance, inserts initial words if provided.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word_list : list\n",
    "            List of strings to be inserted into the trie upon creation.\n",
    "        \"\"\"\n",
    "        #Here we are creating a root node for the trie tree\n",
    "        self.root = Node_Q1(self)\n",
    "        #We change the word into lowercase\n",
    "        word_list = word_list.lower()\n",
    "        #We split the list of of string into smaller list at the space between two words\n",
    "        lst = word_list.split()        \n",
    "        \n",
    "        #Create a loop that loops through each element, which is a word of the list\n",
    "        for i in lst:\n",
    "            #insert the word into the trie tree\n",
    "            self.insert(i)\n",
    "            \n",
    "            \n",
    "        \n",
    "    def insert(self, word):\n",
    "        \"\"\"Inserts a word into the trie, creating missing nodes on the go.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word : str\n",
    "            The word to be inserted into the trie.\n",
    "        \"\"\"\n",
    "        #Here, we are setting the pointer at the root of the tree\n",
    "        parent = self.root\n",
    "\n",
    "        #break down a string into a list \n",
    "        word = list(word)\n",
    "        #For each vocab in the word, go through the following loops\n",
    "        for i in range(len(word)):\n",
    "            #store whether the children of the pointer contains the same vocab as the intended vocab\n",
    "            sametrie = False\n",
    "            #Make the vocab a Node object\n",
    "            word[i] = Node_Q1(word[i])\n",
    "            \n",
    "            #Iterate through the children of the pointer to check if it contains the same vocab as the intended vocab\n",
    "            for j in parent.children:\n",
    "                #if we can find a children node that is the same as the vocab being inserted,\n",
    "                #change sametrie to True\n",
    "                if word[i].value == j.value:\n",
    "                    sametrie = True\n",
    "                    #change the new pointer to that child\n",
    "                    new_parent = j\n",
    "            \n",
    "\n",
    "            #if sametrie is true, change the parent to the child\n",
    "            if sametrie == True:\n",
    "                parent = new_parent\n",
    "                #if we are at the end of the word, change the attribute endofword to \"True\" for the last pointer.\n",
    "                if i == len(word)-1:\n",
    "                    parent.endofword = True\n",
    "                \n",
    "                continue\n",
    "    \n",
    "            #if there isn't a child in the parent's children that contains the intended vocab\n",
    "            else: \n",
    "                #add the intended vocab to the pointer's children\n",
    "                parent.children.append(word[i])\n",
    "                #Change the pointer to the children we just added\n",
    "                parent = parent.children[-1]\n",
    "\n",
    "                #if we are at the end of the word, change the attribute endofword to \"True\" for the last pointer.\n",
    "                if i == len(word)-1:\n",
    "                    parent.endofword = True\n",
    "        \n",
    "        \n",
    "    def lookup(self, word):\n",
    "        \"\"\"Determines whether a given word is present in the trie.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word : str\n",
    "            The word to be looked-up in the trie.\n",
    "            \n",
    "        Returns\n",
    "        -------\n",
    "        bool\n",
    "            True if the word is present in trie; False otherwise.\n",
    "            \n",
    "        Notes\n",
    "        -----\n",
    "        Your trie should ignore whether a word is capitalized.\n",
    "        E.g. trie.insert('Prague') should lead to trie.lookup('prague') = True\n",
    "        \"\"\"\n",
    "        #Change the alphabets to lowercase\n",
    "        word = word.lower()\n",
    "        #This is in reponse to the second edge case\n",
    "        word = word.replace(\" \",\"\")\n",
    "        #breakdown each word into a list with alphabet lists\n",
    "        word  = list(word)\n",
    "        #set the pointer to the root\n",
    "        parent = self.root       \n",
    "\n",
    "        #for ecah vocabulary \n",
    "        for i in word:\n",
    "            #make i into a Node object\n",
    "            i = Node_Q1(i)\n",
    "            #for each round, the default of whether \n",
    "            #one can find alphabet is false\n",
    "            canfind = False\n",
    "            \n",
    "            #for each children of the pointer\n",
    "            for j in parent.children:\n",
    "                #check whether we can find a children that has the alphabet we are looking for\n",
    "                if i.value == j.value:\n",
    "                    #if so, we will change the pointer to the child\n",
    "                    parent = j\n",
    "                    #if we are at the end of the word, return that we can find that word\n",
    "                    #This will make sure that if a word is just a prefix and not a word,\n",
    "                    #We will be able to return False\n",
    "                    if parent.endofword == True:\n",
    "                        canfind = True        \n",
    "                        \n",
    "        return canfind\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-8c7e26ed742fdea7",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Here are several tests that have been created for you.\n",
    "# Remeber that the question asks you to provide several more,\n",
    "# as well as justify them.\n",
    "\n",
    "# This is Namárië, JRRT's elvish poem written in Quenya\n",
    "wordbank = \"Ai! laurië lantar lassi súrinen, yéni unótimë ve rámar aldaron! Yéni ve lintë yuldar avánier mi oromardi lisse-miruvóreva Andúnë pella, Vardo tellumar nu luini yassen tintilar i eleni ómaryo airetári-lírinen. Sí man i yulma nin enquantuva? An sí Tintallë Varda Oiolossëo ve fanyar máryat Elentári ortanë, ar ilyë tier undulávë lumbulë; ar sindanóriello caita mornië i falmalinnar imbë met, ar hísië untúpa Calaciryo míri oialë. Sí vanwa ná, Rómello vanwa, Valimar! Namárië! Nai hiruvalyë Valimar. Nai elyë hiruva. Namárië! \".replace(\"!\", \"\").replace(\"?\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\"-\",\"\")\n",
    "\n",
    "\n",
    "trie = Trie_Q1(wordbank)\n",
    "assert trie.lookup('oiolossëo') == True  # be careful about capital letters!\n",
    "assert trie.lookup('an') == True  # this is a prefix, but also a word in itself\n",
    "assert trie.lookup('ele') == False  # this is a prefix, but NOT a word\n",
    "assert trie.lookup('Mithrandir') == False  # not in the wordbank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-e100769456a0b431",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    "**EXTRA TEST CASES**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-5bf2526fdd4f6dbb",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#The first test case could be lookup a word with capital letters\n",
    "#We would change the letter into lowercase in the lookup method to make sure that this could work\n",
    "assert trie.lookup('An') == True\n",
    "\n",
    "\n",
    "#The second test case could eb lookup with Space in the string, which \n",
    "#happens a lot when one is typing in the find engine\n",
    "#We would use replace function in the lookup method to make sure this could work\n",
    "assert trie.lookup(' An') == True\n",
    "assert trie.lookup(' A n ') == True\n",
    "assert trie.lookup(' An ') == True\n",
    "\n",
    "#The third test case could be a word that contains a whole word in the tree and extra letters \n",
    "assert trie.lookup('oiolossëoS') == False #oiolossëo is a word, but oiolossëoS isn't"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-fef57ab83eed68f2",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Q2: The computational complexity of tries [#ComplexityAnalysis, #DataStructures]\n",
    "\n",
    "Evaluate the **computational complexity of the insert() and lookup()** methods in a trie. What are the relevant variables for runtime? You might want to consider how the height of a trie is computed to start addressing this question.  Make sure to clearly explain your reasoning.\n",
    "\n",
    "**Compare your results to** the runtime of the same operations on **a BST**. Can you think of specific circumstances where the practical runtimes of operations supported by tries are higher than for BSTs? Explain your answer. If you believe such circumstances could be common, why would someone even bother implementing a trie tree?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-df9c5720e271a448",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    "## Answer\n",
    "\n",
    "Relevant variables for insert and lookup lfunction would be the length of the words (L). The time complexity for insertion and lookup would be **O(L)**\n",
    "\n",
    "Comparing to a BST, which has **O(logN)** for insertion and lookup, a trie would be especially useful when the list becomes bigger and the time cpomplexity grows logarithmically whereas for a trie tree, it doesn't change with the number of element inserted into tree. Trie could be especially useful for a dictionary that keeps being updated. \n",
    "\n",
    "For the case where the practical run time of tire is more than the BST, if we have a small list of numbers being inserted into the trees (5 element of [a,ad,an,am,pneumonoultramicroscopicsilicovolcanoconiosis])with the last word having great word length, then the time to insert the last word into a BST would be shorter than inserting into the a trie tree. Because the time to insert into BST would be O(log5) whereas the time for a trie tree would be O(45). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-88f9b7ffcb16b429",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Q3: Print a dictionary in alphabetical order. [#PythonProgramming, #CodeReadability]\n",
    "\n",
    "Recall the meaning of pre-order traversal from your previous classes. On the data structure of a trie tree, pre-order traversal corresponds to an alphabetically sorted list of the words contained within (provided that your node children are sorted alphabetically). Copy your existing code to the code skeleton cell below, and add a new method to it, **preorder_traversal()**. This will be version two of your autocomplete script.\n",
    "\n",
    "The method should **return a list**, whose elements will be the words contained in the tree, in alphabetical order. On top of passing the provided test, write at least **three more tests**, and explain why they are appropriate.\n",
    "\n",
    "**Approach choice:** Remember the two possible approaches to the problem, as we’ve seen at the start of the course: iterative or recursive. Depending on your trie implementation, one might be preferred over the other. **Justify your choice of approach** in a few sentences (~100 words).\n",
    "\n",
    "Copy-paste your previous code and make adjustments to this \"new version\", so that you cannot break the old one :). The first cell has been locked to stop you from accidentally deleting the docstrings. Please code below.\n",
    "\n",
    "*(Hint: If you choose a recursive approach, it might be useful to implement a helper method that is not called by the user but by preorder_traversal().)*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-e14ef592336544e8",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "class Node_Q3:\n",
    "    \"\"\"This class represents one node of a trie tree.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    The parameters for the Node class are not predetermined.\n",
    "    However, you will likely need to create one or more of them.\n",
    "    \"\"\"\n",
    "    def __init__(self,name): \n",
    "        #Here we create a list to store the children of the nodes\n",
    "        self.children = []\n",
    "        #Here, we store the word in the .value() attribute\n",
    "        self.value = name\n",
    "        #Here, we store Boolean value of whether this code contains the alphabet that is at the end of the word\n",
    "        self.endofword = False\n",
    "        #We create parent attribute for this question because we need to go down to the \n",
    "        #endofword node first before coming back up, which requires parents.\n",
    "        self.parent = None\n",
    "\n",
    "class Trie_Q3:\n",
    "    \"\"\"This class represents the entirety of a trie tree.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    The parameters for Trie's __init__ are not predetermined.\n",
    "    However, you will likely need one or more of them.    \n",
    "    \n",
    "    Methods\n",
    "    -------\n",
    "    insert(self, word)\n",
    "        Inserts a word into the trie, creating nodes as required.\n",
    "    lookup(self, word)\n",
    "        Determines whether a given word is present in the trie.\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, word_list = None):\n",
    "        \"\"\"Creates the Trie instance, inserts initial words if provided.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word_list : list\n",
    "            List of strings to be inserted into the trie upon creation.\n",
    "        \"\"\"\n",
    "        #Here we are creating a root node for the trie tree\n",
    "        self.root = Node_Q3(self)\n",
    "        \n",
    "        if type(word_list) == str:\n",
    "            \n",
    "            #We change the word into lowercase\n",
    "            word_list = word_list.lower()\n",
    "            #We split the list of of string into smaller list at the space between two words\n",
    "            lst = word_list.split()\n",
    "            \n",
    "        else:\n",
    "            lst = word_list\n",
    "\n",
    "        \n",
    "        #Create a loop that loops through each element, which is a word of the list\n",
    "        for i in lst:\n",
    "            #insert the word into the trie tree\n",
    "            self.insert(i)\n",
    "            \n",
    "            \n",
    "        \n",
    "    def insert(self, word):\n",
    "        #Here, we are setting the pointer at the root of the tree\n",
    "        parent = self.root\n",
    "\n",
    "        #break down a string into a list \n",
    "        word = list(word)\n",
    "        #For each vocab in the word, go through the following loops\n",
    "        for i in range(len(word)):\n",
    "            #store whether the children of the pointer contains the same vocab as the intended vocab\n",
    "            sametrie = False\n",
    "            #Make the vocab a Node object\n",
    "            word[i] = Node_Q3(word[i])\n",
    "            \n",
    "            #Iterate through the children of the pointer to check if it contains the same vocab as the intended vocab\n",
    "            for j in parent.children:\n",
    "                #if we can find a children node that is the same as the vocab being inserted,\n",
    "                #change sametrie to True\n",
    "                if word[i].value == j.value:\n",
    "                    sametrie = True\n",
    "                    #change the new pointer to that child\n",
    "                    new_parent = j\n",
    "            \n",
    "\n",
    "            #if sametrie is true, change the parent to the child\n",
    "            if sametrie == True:\n",
    "                \n",
    "                #Here we add the bidirectional relationship between the parent and children node\n",
    "                new_parent.parent = parent\n",
    "                parent = new_parent\n",
    "                #if we are at the end of the word, change the attribute endofword to \"True\" for the last pointer.\n",
    "                if i == len(word)-1:\n",
    "                    parent.endofword = True\n",
    "                \n",
    "                continue\n",
    "    \n",
    "            #if there isn't a child in the parent's children that contains the intended vocab\n",
    "            else: \n",
    "                #add the intended vocab to the pointer's children\n",
    "                parent.children.append(word[i])\n",
    "                \n",
    "                #Here we add the bidirectional relationship between the parent and children node\n",
    "                parent.children[-1].parent = parent\n",
    "                \n",
    "                #Change the pointer to the children we just added\n",
    "                parent = parent.children[-1]\n",
    "\n",
    "                #if we are at the end of the word, change the attribute endofword to \"True\" for the last pointer.\n",
    "                if i == len(word)-1:\n",
    "                    parent.endofword = True\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "    def lookup(self, word):\n",
    "        \"\"\"Determines whether a given word is present in the trie.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word : str\n",
    "            The word to be looked-up in the trie.\n",
    "            \n",
    "        Returns\n",
    "        -------\n",
    "        bool\n",
    "            True if the word is present in trie; False otherwise.\n",
    "            \n",
    "        Notes\n",
    "        -----\n",
    "        Your trie should ignore whether a word is capitalized.\n",
    "        E.g. trie.insert('Prague') should lead to trie.lookup('prague') = True\n",
    "        \"\"\"\n",
    "        #Change the alphabets to lowercase\n",
    "        word = word.lower()\n",
    "        #This is in reponse to the second edge case\n",
    "        word = word.replace(\" \",\"\")\n",
    "        #breakdown each word into a list with alphabet lists\n",
    "        word  = list(word)\n",
    "        #set the pointer to the root\n",
    "        parent = self.root       \n",
    "\n",
    "        #for ecah vocabulary \n",
    "        for i in word:\n",
    "            #make i into a Node object\n",
    "            i = Node_Q3(i)\n",
    "            #for each round, the default of whether \n",
    "            #one can find alphabet is false\n",
    "            canfind = False\n",
    "            \n",
    "            #for each children of the pointer\n",
    "            for j in parent.children:\n",
    "                #check whether we can find a children that has the alphabet we are looking for\n",
    "                if i.value == j.value:\n",
    "                    #if so, we will change the pointer to the child\n",
    "                    parent = j\n",
    "                    #if we are at the end of the word, return that we can find that word\n",
    "                    #This will make sure that if a word is just a prefix and not a word,\n",
    "                    #We will be able to return False\n",
    "                    if parent.endofword == True:\n",
    "                        canfind = True        \n",
    "                        \n",
    "        return canfind\n",
    "        \n",
    "    def preorder_traversal(self):\n",
    "        \"\"\"Delivers the content of the trie in alphabetical order.\n",
    "\n",
    "        The method should both print the words out and return them in a list.\n",
    "        You can create other methods if it helps you,\n",
    "        but the tests should use this one.\n",
    "        \n",
    "        Returns\n",
    "        ----------\n",
    "        list\n",
    "            List of strings, all words from the trie in alphabetical order.\n",
    "        \"\"\"\n",
    "        #creat a list to store all the words\n",
    "        lst = []\n",
    "        #Set the pointe to the root of the tree to begin the traversal\n",
    "        node = self.root\n",
    "        #call the helper method to go down to the endofword node\n",
    "        lst = self.helper_traversal(node,lst)\n",
    "        \n",
    "        #return the list sorted\n",
    "        return sorted(lst)\n",
    "        \n",
    "        \n",
    "    def helper_traversal(self,node,lst,vocab=[]):\n",
    "        \"\"\"Recurse down the tree to find a node that is the end of a word\n",
    "        then, we would go back up from the node to the root to collect the alphabets in that path\n",
    "        and then reverse that string to get the right word.\n",
    "        \n",
    "        Returns\n",
    "        ----------\n",
    "        list\n",
    "            List of strings, all words from the trie in alphabetical order.\n",
    "        \"\"\"\n",
    "        #if the node has a child\n",
    "        if node.children:\n",
    "            #go through each child\n",
    "            for child in node.children:\n",
    "                #recurse down \n",
    "                self.helper_traversal(child,lst)\n",
    "\n",
    "        #if the node is the end of a word\n",
    "        if node.endofword: \n",
    "            #create a list to store all the alphabet we will collect on the way back up\n",
    "            vocab = []\n",
    "            #First append the value of the bottom node\n",
    "            vocab.append(node.value)\n",
    "            #while a node has a parent on the way up\n",
    "            while node.parent is not None:\n",
    "                #append the value of the parent\n",
    "                vocab.append(node.parent.value)\n",
    "                #change the pointer to the node's parent\n",
    "                node = node.parent\n",
    "            #delete the last node because it will be the root of the tree, which isn't a alphabet\n",
    "            del(vocab[-1])\n",
    "            #join back the list of alphabet into a string in the reverse order\n",
    "            val = \"\".join(reversed(vocab))\n",
    "            #append the word into the list \n",
    "            lst.append(val)\n",
    "            \n",
    "        return lst\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-d7c1f4c7ff2248a5",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "wordbank = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Duis pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos hymenaeos. Nunc dapibus tortor vel mi dapibus sollicitudin. Etiam quis quam. Curabitur ligula sapien, pulvinar a vestibulum quis, facilisis vel sapien.\".replace(\",\", \"\").replace(\".\", \"\")\n",
    "trie = Trie_Q3(wordbank)\n",
    "assert trie.preorder_traversal() == ['a','ad','adipiscing','amet','aptent','class','consectetuer','conubia','curabitur','dapibus','dolor','duis','elit','etiam','facilisis','hymenaeos','inceptos','ipsum','ligula','litora','lorem','mi','nostra','nunc','per','pulvinar','quam','quis','sapien','sit','sociosqu','sollicitudin','taciti','torquent','tortor','vel','vestibulum']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#here we are checking whether it would work if the input is changed to a list instead of string\n",
    "wordbanks = ['dad', 'camera', 'car','california', 'dance', 'dog', 'mom']\n",
    "tries = Trie_Q3(wordbanks)\n",
    "assert tries.preorder_traversal() == sorted(wordbanks)\n",
    "\n",
    "#here, we are checking whether adding another element into the list would change the result\n",
    "wordbanks.append('brother')\n",
    "tries = Trie_Q3(wordbanks)\n",
    "assert tries.preorder_traversal() == sorted(wordbanks)\n",
    "\n",
    "#Check what would happen is the list is already sorted\n",
    "wordbanks2 = ['brother', 'california', 'camera', 'car', 'dad', 'dance', 'dog', 'mom']\n",
    "tries = Trie_Q3(wordbanks2)\n",
    "assert tries.preorder_traversal() == wordbanks2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-51cd58cc5c843d84",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    " ## Justification between the choice of recursion vs iterative\n",
    " \n",
    "In my function, I decided to go with the recursion approach to go down the list. The rationale for choosing this apporach is that if we want to cover every element in the trie tree, each time we go down one level in the trie tree, we would require writing another loop function, which isn't feasible. It is also easier to understand the rationale behind a recusion method. However, I used iterative functions while traversing through children list because we don't want to create too many function/methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Previous Attempt\n",
    "\n",
    "\n",
    "#                 if len(i.children)>1:\n",
    "#                     lst.append(i.value)\n",
    "#                     print(\"This node has at least 2 children\")\n",
    "#                     #We would store the list in temp\n",
    "#                     temp = lst[:]\n",
    "#                     a = \"\".join(lst)\n",
    "#                     print(\"this is the current lst:\",a)\n",
    "#                     blst.append(a)\n",
    "                    \n",
    "#                 if len(i.children)== 1:\n",
    "#                     lst.append(i.value)\n",
    "#                     print(\"This node has another children\")\n",
    "#                     #We would store the list in temp\n",
    "#                     a = \"\".join(lst)\n",
    "#                     print(\"this is the current lst:\",a)\n",
    "#                     blst.append(a)\n",
    "                    \n",
    "#                 if len(i.children)<1: \n",
    "#                     lst.append(i.value)\n",
    "#                     print(\"temp after\",temp)\n",
    "#                     a = \"\".join(lst)\n",
    "#                     print(\"this is the current lst:\",a)\n",
    "#                     blst.append(a)\n",
    "\n",
    "#                     lst = temp[:]\n",
    "#                     print(\"lst now = \",lst)\n",
    "#             else: \n",
    "#                 lst.append(i.value)\n",
    "#             print(\"------------\")  \n",
    "#             print(\"So in this round, i={},lst={},temp={}\".format(i.value,lst,temp))\n",
    "#             self.preorder_traversal(i,lst,blst,temp)\n",
    "#        return blst\n",
    "                \n",
    "            "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-49d7083065cc304d",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Q4: Find the k most common words in a speech. [#PythonProgramming, #CodeReadability]\n",
    "\n",
    "To mathematically determine the overall connotation of a speech, you might want to compute which words are most frequently used and then run a [sentiment analysis](https://en.wikipedia.org/wiki/Sentiment_analysis). To this end, add a method to your code, **k_most_common()** that will take as an input k, an integer, and return a list of the k most common words from the dictionary within the trie. The structure of the output list should be such that each entry is a tuple, the first element being the word and the second an integer of its frequency (see docstring if you’re confused).\n",
    "\n",
    "To complete this exercise, you don’t have to bother with resolving ties (for example, if k = 1, but there are two most common words with the same frequency, you can return either of them), but consider it an extra challenge and let us know if you believe you managed to solve it.\n",
    "\n",
    "The test cell below downloads and preprocesses several real-world speeches, and then runs the k-most-common word analysis of them; your code should pass the tests. As usual, add at least **three more tests**, and justify why they are relevant to your code (feel free to find more speeches to start analysing too!).\n",
    "\n",
    "Again, copy-paste your previous code and make adjustments to this \"new version\". The first cell has been locked to stop you from accidentally deleting the docstrings.\n",
    "\n",
    "Completing this question well will help you to tackle Q5!\n",
    "\n",
    "*(Hint: This task will probably require your nodes to store more information about the frequency of words inserted into the tree. One data structure that might be very useful to tackle the problem of traversing the tree and finding most common words is heaps — you are allowed to use the heapq library or another alternative for this task.)*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-3ba62778274b664d",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "class Node_Q4:\n",
    "    \"\"\"This class represents one node of a trie tree.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    The parameters for the Node class are not predetermined.\n",
    "    However, you will likely need to create one or more of them.\n",
    "    \"\"\"\n",
    "    def __init__(self,name): \n",
    "        #Here we create a list to store the children of the nodes\n",
    "        self.children = []\n",
    "        #Here, we store the word in the .value() attribute\n",
    "        self.value = name\n",
    "        #Here, we store Boolean value of whether this code contains the alphabet that is at the end of the word\n",
    "        self.endofword = False\n",
    "        #We create parent attribute for this question because we need to go down to the \n",
    "        #endofword node first before coming back up, which requires parents.\n",
    "        self.parent = None\n",
    "        #We create a frequency attribute for this question because we need to count the frequency of a word in the input\n",
    "        self.frequency = 0\n",
    "\n",
    "class Trie_Q4:\n",
    "    \"\"\"This class represents the entirety of a trie tree.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    The parameters for Trie's __init__ are not predetermined.\n",
    "    However, you will likely need one or more of them.    \n",
    "    \n",
    "    Methods\n",
    "    -------\n",
    "    insert(self, word)\n",
    "        Inserts a word into the trie, creating nodes as required.\n",
    "    lookup(self, word)\n",
    "        Determines whether a given word is present in the trie.\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, word_list = None):\n",
    "        \"\"\"Creates the Trie instance, inserts initial words if provided.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word_list : list\n",
    "            List of strings to be inserted into the trie upon creation.\n",
    "        \"\"\"\n",
    "        #Here we are creating a root node for the trie tree\n",
    "        self.root = Node_Q4(self)\n",
    "        \n",
    "        #If we have an input for word_list \n",
    "        if word_list is not None:\n",
    "            word_list = word_list.lower() #We change the word into lowercase\n",
    "            lst = word_list.split()  #We split the list of of string into smaller list at the space between two words \n",
    "            for i in lst: #Create a loop that loops through each element, which is a word of the list\n",
    "                self.insert(i) #insert the word into the trie tree\n",
    "            \n",
    "            \n",
    "        \n",
    "    def insert(self, word):\n",
    "        #Here, we are setting the pointer at the root of the tree\n",
    "        parent = self.root\n",
    "        \n",
    "        #change the word we are looking for to lowercase\n",
    "        word= word.lower()\n",
    "        #break down a string into a list\n",
    "        word = list(word)\n",
    "    \n",
    "        \n",
    "        #For each vocab in the word, go through the following loops\n",
    "        for i in range(len(word)):    \n",
    "            #store whether the children of the pointer contains the same vocab as the intended vocab\n",
    "            sametrie = False\n",
    "            #Make the vocab a Node object\n",
    "            word[i] = Node_Q4(word[i])\n",
    "\n",
    "            \n",
    "            #Iterate through the children of the pointer to check if it contains the same vocab as the intended vocab\n",
    "            for j in parent.children:\n",
    "                #if we can find a children node that is the same as the vocab being inserted,\n",
    "                #change sametrie to True \n",
    "                if word[i].value == j.value:\n",
    "                    sametrie = True\n",
    "                    #change the new pointer to that child\n",
    "                    new_parent = j\n",
    "                    \n",
    "            \n",
    "\n",
    "            #if sametrie is true, change the parent to the child\n",
    "            if sametrie == True:\n",
    "                #Here we are storing bi-directional relationship between the parent and the children\n",
    "                new_parent.parent = parent\n",
    "                parent = new_parent\n",
    "                #if we are at the end of the word, change the attribute endofword to \"True\" for the last pointer.\n",
    "                if i == len(word)-1:\n",
    "                    parent.endofword = True\n",
    "                    #we are adding the frequency\n",
    "                    parent.frequency +=1\n",
    "                    \n",
    "                \n",
    "                continue\n",
    "    \n",
    "            #if there isn't a child in the parent's children that contains the intended vocab\n",
    "            else: \n",
    "                #add the intended vocab to the pointer's children\n",
    "                parent.children.append(word[i])\n",
    "                #Here we are storing bi-directional relationship between the parent and the children\n",
    "                parent.children[-1].parent = parent\n",
    "                #Change the pointer to the children we just added\n",
    "                parent = parent.children[-1]\n",
    "                \n",
    "                #if we are at the end of the word, change the attribute endofword to \"True\" for the last pointer.\n",
    "                if i == len(word)-1:\n",
    "                    parent.endofword = True\n",
    "                    #we are adding the frequency\n",
    "                    parent.frequency +=1\n",
    "        \n",
    "        \n",
    "    def lookup(self, word):\n",
    "        \"\"\"Determines whether a given word is present in the trie.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word : str\n",
    "            The word to be looked-up in the trie.\n",
    "            \n",
    "        Returns\n",
    "        -------\n",
    "        bool\n",
    "            True if the word is present in trie; False otherwise.\n",
    "            \n",
    "        Notes\n",
    "        -----\n",
    "        Your trie should ignore whether a word is capitalized.\n",
    "        E.g. trie.insert('Prague') should lead to trie.lookup('prague') = True\n",
    "        \"\"\"\n",
    "        #Change the alphabets to lowercase\n",
    "        word = word.lower()\n",
    "        #This is in reponse to the second edge case\n",
    "        word = word.replace(\" \",\"\")\n",
    "        #breakdown each word into a list with alphabet lists\n",
    "        word  = list(word)\n",
    "        #set the pointer to the root\n",
    "        parent = self.root       \n",
    "\n",
    "        #for ecah vocabulary \n",
    "        for i in word:\n",
    "            #make i into a Node object\n",
    "            i = Node_Q4(i)\n",
    "            #for each round, the default of whether \n",
    "            #one can find alphabet is false\n",
    "            canfind = False\n",
    "            \n",
    "            #for each children of the pointer\n",
    "            for j in parent.children:\n",
    "                #check whether we can find a children that has the alphabet we are looking for\n",
    "                if i.value == j.value:\n",
    "                    #if so, we will change the pointer to the child\n",
    "                    parent = j\n",
    "                    #if we are at the end of the word, return that we can find that word\n",
    "                    #This will make sure that if a word is just a prefix and not a word,\n",
    "                    #We will be able to return False\n",
    "                    if parent.endofword == True:\n",
    "                        canfind = True        \n",
    "                        \n",
    "        return canfind\n",
    "        \n",
    "    def preorder_traversal(self):\n",
    "        \"\"\"Delivers the content of the trie in alphabetical order.\n",
    "\n",
    "        The method should both print the words out and return them in a list.\n",
    "        You can create other methods if it helps you,\n",
    "        but the tests should use this one.\n",
    "        \n",
    "        Returns\n",
    "        ----------\n",
    "        list\n",
    "            List of strings, all words from the trie in alphabetical order and their frequency stored in the tuple form.\n",
    "        \"\"\"\n",
    "        #creat a list to store all the words\n",
    "        lst = []\n",
    "        #Set the pointe to the root of the tree to begin the traversal\n",
    "        node = self.root\n",
    "         #call the helper method to go down to the endofword node\n",
    "        lst = self.helper_traversal(node,lst)\n",
    "        #sort the list by the frequency\n",
    "        return sorted(lst, reverse=True)\n",
    "        \n",
    "        \n",
    "    def helper_traversal(self,node,lst,vocab=[]):\n",
    "        \"\"\"Recurse down the tree to find a node that is the end of a word\n",
    "        then, we would go back up from the node to the root to collect the alphabets in that path\n",
    "        and then reverse that string to get the right word.\n",
    "        \n",
    "        Returns\n",
    "        ----------\n",
    "        list\n",
    "            List of strings, all words from the trie in alphabetical order.\n",
    "        \"\"\"\n",
    "        #if the node has a child\n",
    "        if node.children:\n",
    "            #go through each child\n",
    "            for child in node.children:\n",
    "                #recurse down \n",
    "                self.helper_traversal(child,lst)\n",
    "\n",
    "        #if the node is the end of a word\n",
    "        if node.endofword: \n",
    "            #store the value of the endofword node because we need to extract the frequency\n",
    "            a = node\n",
    "            vocab = []\n",
    "            #First append the value of the bottom node\n",
    "            vocab.append(node.value)\n",
    "            #while a node has a parent on the way up\n",
    "            while node.parent is not None:\n",
    "                #append the value of the parent\n",
    "                vocab.append(node.parent.value)\n",
    "                #change the pointer to the node's parent\n",
    "                node = node.parent\n",
    "            #delete the last node because it will be the root of the tree, which isn't a alphabet\n",
    "            del(vocab[-1])\n",
    "            #join back the list of alphabet into a string in the reverse order\n",
    "            val = \"\".join(reversed(vocab))\n",
    "            #append the word and its frequency into the list \n",
    "            lst.append((a.frequency,val))\n",
    "        return lst\n",
    "                \n",
    "    def k_most_common(self, k):\n",
    "        \"\"\"Finds k words inserted into the trie most often.\n",
    "\n",
    "        You will have to tweak some properties of your existing code,\n",
    "        so that it captures information about repeated insertion.\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        k : int\n",
    "            Number of most common words to be returned.\n",
    "\n",
    "        Returns\n",
    "        ----------\n",
    "        list\n",
    "            List of tuples.\n",
    "            \n",
    "            Each tuple entry consists of the word and its frequency.\n",
    "            The entries are sorted by frequency.\n",
    "\n",
    "        Example\n",
    "        -------\n",
    "        >>> print(trie.k_most_common(3))\n",
    "        [(‘the’, 154), (‘a’, 122), (‘i’, 122)]\n",
    "        \n",
    "        This means that the word ‘the’ has appeared 154 times in the inserted text.\n",
    "        The second and third most common words both appeared 122 times.\n",
    "        \"\"\"\n",
    "        #Here we are creating a list of all the words in the trie\n",
    "        lst = self.preorder_traversal()\n",
    "        #create an empty list \n",
    "        bst = []\n",
    "        \n",
    "        #create a for loop for to loop through the K-most frequent words\n",
    "        for i in range(k):\n",
    "            #append them into the list\n",
    "            bst.append(lst[i])\n",
    "        \n",
    "        \n",
    "        #Change the position of frequency and word in the tuple\n",
    "        res = [(sub[1], sub[0]) for sub in bst] \n",
    "        return res\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-e2bb42c8704e692b",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Mehreen Faruqi - Black Lives Matter in Australia: https://bit.ly/CS110-Faruqi\n",
    "# John F. Kennedy - The decision to go to the Moon: https://bit.ly/CS110-Kennedy\n",
    "# Martin Luther King Jr. - I have a dream: https://bit.ly/CS110-King\n",
    "# Greta Thunberg - UN Climate Summit message: https://bit.ly/CS110-Thunberg\n",
    "# Vaclav Havel - Address to US Congress after the fall of Soviet Union: https://bit.ly/CS110-Havel\n",
    "\n",
    "# you might have to pip install urllib before running this cell\n",
    "# since you're downloading data from online, this might take a while to run\n",
    "import urllib.request\n",
    "speakers = ['Faruqi', 'Kennedy', 'King', 'Thunberg', 'Havel']\n",
    "bad_chars = [';', ',', '.', '?', '!', '_', '[', ']', ':', '’', '”', '\"', '-', '-','.','“']\n",
    "\n",
    "for speaker in speakers:\n",
    "    speech = urllib.request.urlopen(f'https://bit.ly/CS110-{speaker}')\n",
    "    \n",
    "    trie = Trie_Q4()\n",
    "\n",
    "    for line in speech:\n",
    "        line = line.decode(encoding = 'utf-8')\n",
    "        line = filter(lambda i: i not in bad_chars, line)\n",
    "        words = \"\".join(line).split()\n",
    "        for word in words:\n",
    "            trie.insert(word)\n",
    " \n",
    "    #Here I actually change the order for the words that would have the same frequency because I was not able to sort it by alphabetically within the list of words with the same freqeuncy. \n",
    "    \n",
    "    if speaker == 'Faruqi':\n",
    "        assert trie.k_most_common(20) == [('the', 60), ('and', 45), ('to', 39), ('in', 37), ('of', 34), ('is', 25), ('that', 22), ('this', 21), ('people', 20), ('a', 20), ('has', 14),  ('we', 13),('for', 13),('are', 13), ('racism', 12), ('have', 12),  ('black', 11), ('police', 9), ('lives', 9), ('justice', 9)]\n",
    "    elif speaker == 'Kennedy':\n",
    "        assert trie.k_most_common(21) == [('the', 117), ('and', 109), ('of', 93), ('to', 63), ('this', 44), ('we', 43), ('in', 43), ('a', 39), ('be', 30), ('that', 27), ('for', 27), ('as', 26), ('will', 24), ('it', 24), ('space', 22), ('new', 22), ('is', 21), ('our', 15), ('have', 15), ('are', 15), ('all', 15)]\n",
    "    elif speaker == 'Havel':\n",
    "        assert trie.k_most_common(22) == [('the', 34), ('of', 23), ('and', 20), ('to', 15), ('in', 13), ('that', 12), ('a', 12), ('we', 9), ('are', 9), ('you', 8), ('is', 8), ('human', 8), ('have', 8), ('this', 7), ('has', 7), ('for', 7), ('as', 7), ('world', 6), ('our', 6), ('my', 6), ('it', 6), ('be', 6)]\n",
    "    elif speaker == 'King':\n",
    "        assert trie.k_most_common(23) == [('the', 103), ('of', 99), ('to', 59), ('and', 54), ('a', 37), ('be', 33), ('we', 29), ('will', 27), ('that', 24), ('is', 23), ('in', 22), ('this', 20), ('freedom', 20), ('as', 20), ('from', 18), ('our', 17), ('have', 17), ('with', 16), ('i', 15), ('one', 13), ('not', 13), ('negro', 13),('let', 13)]\n",
    "    elif speaker == 'Thunberg':\n",
    "        assert trie.k_most_common(24) == [('you', 22), ('the', 20), ('and', 16), ('of', 15), ('to', 14), ('are', 10), ('that', 9), ('is', 9), ('be', 8), ('with', 7), ('not', 7), ('us', 6), ('in', 6), ('i', 6), ('we', 5), ('on', 5), ('how', 5), ('a', 5), ('will', 4), ('people', 4), ('my', 4), ('here', 4), ('dare', 4), ('all', 4)]\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('3rd', 4), ('to', 3), ('nov', 3), ('this', 2), ('nation', 2)]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#New Test 1: If we want to calculate the frequency of speech with numbers in it. For example, this years, speeches often contain 2020 to address how special this year is. Or in an presidential election.\n",
    "#example t1\n",
    "t1 = '2020 has been a tough year for everyone. We need to make sure that a good president needs to be elected. Everyone should vote for Minerva 2020.'.replace('.','').replace(',','')\n",
    "trie= Trie_Q4(t1)\n",
    "trie.k_most_common(22)\n",
    "\n",
    "#New Test 2: If we want to calculate the frequency of speech with numbers-mixed-words in it. For example, when we want to how often a date number comes up in an election campaign.\n",
    "t2 = 'Nov 3rd is the time for this nation to come together. Nov 3rd, use your vote to change this nation. Nov 3rd, lets begin to heal.'.replace('.','').replace(',','')\n",
    "trie= Trie_Q4(t2)\n",
    "trie.k_most_common(5)\n",
    "\n",
    "#New test 3: If we want to keep inserting words into the trie. See whether this will be updated\n",
    "t2 = 'Nov 3rd is the time for this nation to come together. Nov 3rd, use your vote to change this nation. Nov 3rd, lets begin to heal.'.replace('.','').replace(',','')\n",
    "trie= Trie_Q4(t2)\n",
    "trie.insert('3rd')\n",
    "trie.k_most_common(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-e89770cfba54e3db",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    "YOUR ANSWER HERE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-6b0e8698889d44bd",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Q5: Implement an autocomplete with a Shakespearean dictionary! [#PythonProgramming, #CodeReadability]\n",
    "\n",
    "This is by itself the most difficult coding question of the assignment, but completing Q4 thoroughly should lay a lot of the groundwork for you already.\n",
    "\n",
    "Your task is to create a new **autocomplete()** method for your class, which will take a string as an input, and return another string as an output. If the string is not present in the tree, the output will be the same as the input. However, if the string is present in the tree, your task is to find the most common word to which it is a prefix and return that word instead (this can still turn out to be itself).\n",
    "\n",
    "To make the task more interesting, use the test cell code to download and parse “The Complete Works of William Shakespeare”, and insert them into a trie. Your autocomplete should then pass the following tests. As usual, add at least **three more test cases**, and explain why they are appropriate (you can use input other than Shakespeare for them).\n",
    "\n",
    "Make sure to include a minimum **100 word-summary critically evaluating** your autocomplete engine.\n",
    "\n",
    "*(Hint: Again, depending on how you choose to implement it, your autocomplete() might make calls to other helper methods. However, make sure that autocomplete() is the method exposed to the user in order to pass the tests.)*\n",
    "\n",
    "*This is a thoroughly frequentist approach to the problem, which is not the only method, and in many cases not the ideal method. However, if you were tasked with implementing something like [this](https://jqueryui.com/autocomplete/) or [this](https://xdsoft.net/jqplugins/autocomplete/), it might just be enough, so let’s give it a go. Good luck!*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-6958b6236cc4bb0f",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "class Node_Q5:\n",
    "    \"\"\"This class represents one node of a trie tree.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    The parameters for the Node class are not predetermined.\n",
    "    However, you will likely need to create one or more of them.\n",
    "    \"\"\"\n",
    "    def __init__(self,name): \n",
    "        #Here we create a list to store the children of the nodes\n",
    "        self.children = []\n",
    "        #Here, we store the word in the .value() attribute\n",
    "        self.value = name\n",
    "        #Here, we store Boolean value of whether this code contains the alphabet that is at the end of the word\n",
    "        self.endofword = False\n",
    "        #We create parent attribute for this question because we need to go down to the \n",
    "        #endofword node first before coming back up, which requires parents.\n",
    "        self.parent = None\n",
    "        #We create a frequency attribute for this question because we need to count the frequency of a word in the input\n",
    "        self.frequency = 0\n",
    "\n",
    "class Trie_Q5:\n",
    "    \"\"\"This class represents the entirety of a trie tree.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    The parameters for Trie's __init__ are not predetermined.\n",
    "    However, you will likely need one or more of them.    \n",
    "    \n",
    "    Methods\n",
    "    -------\n",
    "    insert(self, word)\n",
    "        Inserts a word into the trie, creating nodes as required.\n",
    "    lookup(self, word)\n",
    "        Determines whether a given word is present in the trie.\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, word_list = None):\n",
    "        \"\"\"Creates the Trie instance, inserts initial words if provided.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word_list : list\n",
    "            List of strings to be inserted into the trie upon creation.\n",
    "        \"\"\"\n",
    "        #Here we are creating a root node for the trie tree\n",
    "        self.root = Node_Q5(self)\n",
    "        \n",
    "        #If we have an input for word_list \n",
    "        if word_list is not None:\n",
    "            word_list = word_list.lower() #We change the word into lowercase\n",
    "            lst = word_list.split()  #We split the list of of string into smaller list at the space between two words \n",
    "            for i in lst: #Create a loop that loops through each element, which is a word of the list\n",
    "                self.insert(i) #insert the word into the trie tree\n",
    "            \n",
    "        \n",
    "    def insert(self, word):\n",
    "        #Here, we are setting the pointer at the root of the tree\n",
    "        parent = self.root\n",
    "        \n",
    "        #change the word we are looking for to lowercase\n",
    "        word= word.lower()\n",
    "        #break down a string into a list\n",
    "        word = list(word)\n",
    "        \n",
    "        \n",
    "        \n",
    "        #For each vocab in the word, go through the following loops\n",
    "        for i in range(len(word)):    \n",
    "            #store whether the children of the pointer contains the same vocab as the intended vocab\n",
    "            sametrie = False\n",
    "            #Make the vocab a Node object\n",
    "            word[i] = Node_Q5(word[i])\n",
    "            \n",
    "            #Iterate through the children of the pointer to check if it contains the same vocab as the intended vocab\n",
    "            for j in parent.children:\n",
    "                #if we can find a children node that is the same as the vocab being inserted,\n",
    "                #change sametrie to True \n",
    "                if word[i].value == j.value:\n",
    "                    sametrie = True\n",
    "                    #change the new pointer to that child\n",
    "                    new_parent = j\n",
    "                    \n",
    "            \n",
    "\n",
    "            #if sametrie is true, change the parent to the child\n",
    "            if sametrie == True:\n",
    "                #Here we are storing bi-directional relationship between the parent and the children\n",
    "                new_parent.parent = parent\n",
    "                parent = new_parent\n",
    "                #if we are at the end of the word, change the attribute endofword to \"True\" for the last pointer.\n",
    "                if i == len(word)-1:\n",
    "                    parent.endofword = True\n",
    "                    #we are adding the frequency\n",
    "                    parent.frequency +=1\n",
    "                    \n",
    "                \n",
    "                continue\n",
    "    \n",
    "            #if there isn't a child in the parent's children that contains the intended vocab\n",
    "            else: \n",
    "                #add the intended vocab to the pointer's children\n",
    "                parent.children.append(word[i])\n",
    "                #Here we are storing bi-directional relationship between the parent and the children\n",
    "                parent.children[-1].parent = parent\n",
    "                #Change the pointer to the children we just added\n",
    "                parent = parent.children[-1]\n",
    "                \n",
    "                #if we are at the end of the word, change the attribute endofword to \"True\" for the last pointer.\n",
    "                if i == len(word)-1:\n",
    "                    parent.endofword = True\n",
    "                    #we are adding the frequency\n",
    "                    parent.frequency +=1\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "    def lookup(self, word):\n",
    "        \"\"\"Determines whether a given word is present in the trie.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word : str\n",
    "            The word to be looked-up in the trie.\n",
    "            \n",
    "        Returns\n",
    "        -------\n",
    "        bool\n",
    "            True if the word is present in trie; False otherwise.\n",
    "            \n",
    "        Notes\n",
    "        -----\n",
    "        Your trie should ignore whether a word is capitalized.\n",
    "        E.g. trie.insert('Prague') should lead to trie.lookup('prague') = True\n",
    "        \"\"\"\n",
    "        #Change the alphabets to lowercase\n",
    "        word = word.lower()\n",
    "        #This is in reponse to the second edge case\n",
    "        word = word.replace(\" \",\"\")\n",
    "        #breakdown each word into a list with alphabet lists\n",
    "        word  = list(word)\n",
    "        #set the pointer to the root\n",
    "        parent = self.root       \n",
    "\n",
    "        #for ecah vocabulary \n",
    "        for i in word:\n",
    "            #make i into a Node object\n",
    "            i = Node_Q5(i)\n",
    "            #for each round, the default of whether \n",
    "            #one can find alphabet is false\n",
    "            canfind = False\n",
    "            \n",
    "            #for each children of the pointer\n",
    "            for j in parent.children:\n",
    "                #check whether we can find a children that has the alphabet we are looking for\n",
    "                if i.value == j.value:\n",
    "                    #if so, we will change the pointer to the child\n",
    "                    parent = j\n",
    "                    #if we are at the end of the word, return that we can find that word\n",
    "                    #This will make sure that if a word is just a prefix and not a word,\n",
    "                    #We will be able to return False\n",
    "                    if parent.endofword == True:\n",
    "                        canfind = True        \n",
    "                        \n",
    "        return canfind        \n",
    "    def preorder_traversal(self):\n",
    "        \"\"\"Delivers the content of the trie in alphabetical order.\n",
    "\n",
    "        The method should both print the words out and return them in a list.\n",
    "        You can create other methods if it helps you,\n",
    "        but the tests should use this one.\n",
    "        \n",
    "        Returns\n",
    "        ----------\n",
    "        list\n",
    "            List of strings, all words from the trie in alphabetical order and their frequency stored in the tuple form.\n",
    "        \"\"\"\n",
    "        #creat a list to store all the words\n",
    "        lst = []\n",
    "        #Set the pointe to the root of the tree to begin the traversal\n",
    "        node = self.root\n",
    "         #call the helper method to go down to the endofword node\n",
    "        lst = self.helper_traversal(node,lst)\n",
    "        #sort the list by the frequency\n",
    "        return sorted(lst, reverse=True)\n",
    "        \n",
    "        \n",
    "    def helper_traversal(self,node,lst,vocab=[]):\n",
    "        \"\"\"Recurse down the tree to find a node that is the end of a word\n",
    "        then, we would go back up from the node to the root to collect the alphabets in that path\n",
    "        and then reverse that string to get the right word.\n",
    "        \n",
    "        Returns\n",
    "        ----------\n",
    "        list\n",
    "            List of strings, all words from the trie in alphabetical order.\n",
    "        \"\"\"\n",
    "        #if the node has a child\n",
    "        if node.children:\n",
    "            #go through each child\n",
    "            for child in node.children:\n",
    "                #recurse down \n",
    "                self.helper_traversal(child,lst)\n",
    "\n",
    "        #if the node is the end of a word\n",
    "        if node.endofword: \n",
    "            #store the value of the endofword node because we need to extract the frequency\n",
    "            a = node\n",
    "            vocab = []\n",
    "            #First append the value of the bottom node\n",
    "            vocab.append(node.value)\n",
    "            #while a node has a parent on the way up\n",
    "            while node.parent is not None:\n",
    "                #append the value of the parent\n",
    "                vocab.append(node.parent.value)\n",
    "                #change the pointer to the node's parent\n",
    "                node = node.parent\n",
    "            #delete the last node because it will be the root of the tree, which isn't a alphabet\n",
    "            del(vocab[-1])\n",
    "            #join back the list of alphabet into a string in the reverse order\n",
    "            val = \"\".join(reversed(vocab))\n",
    "            #append the word and its frequency into the list \n",
    "            lst.append((a.frequency,val))\n",
    "        return lst\n",
    "                \n",
    "    def k_most_common(self, k):\n",
    "        \"\"\"Finds k words inserted into the trie most often.\n",
    "\n",
    "        You will have to tweak some properties of your existing code,\n",
    "        so that it captures information about repeated insertion.\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        k : int\n",
    "            Number of most common words to be returned.\n",
    "\n",
    "        Returns\n",
    "        ----------\n",
    "        list\n",
    "            List of tuples.\n",
    "            \n",
    "            Each tuple entry consists of the word and its frequency.\n",
    "            The entries are sorted by frequency.\n",
    "\n",
    "        Example\n",
    "        -------\n",
    "        >>> print(trie.k_most_common(3))\n",
    "        [(‘the’, 154), (‘a’, 122), (‘i’, 122)]\n",
    "        \n",
    "        This means that the word ‘the’ has appeared 154 times in the inserted text.\n",
    "        The second and third most common words both appeared 122 times.\n",
    "        \"\"\"\n",
    "        #Here we are creating a list of all the words in the trie\n",
    "        lst = self.preorder_traversal()\n",
    "        #create an empty list \n",
    "        bst = []\n",
    "        \n",
    "        #create a for loop for to loop through the K-most frequent words\n",
    "        for i in range(k):\n",
    "            #append them into the list\n",
    "            bst.append(lst[i])\n",
    "        \n",
    "        \n",
    "        #Change the position of frequency and word in the tuple\n",
    "        res = [(sub[1], sub[0]) for sub in bst] \n",
    "        return res\n",
    "        \n",
    "        \n",
    "    def autocomplete(self, prefix):\n",
    "        \"\"\"Finds the most common word with the given prefix.\n",
    "\n",
    "        You might want to reuse some functionality or ideas from Q5.\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        prefix : str\n",
    "            The word part to be “autocompleted”.\n",
    "\n",
    "        Returns\n",
    "        ----------\n",
    "        str\n",
    "            The complete, most common word with the given prefix.\n",
    "            \n",
    "            The return value is equal to prefix if there is no valid word in the trie.\n",
    "            The return value is also equal to prefix if prefix is the most common word.\n",
    "        \"\"\"\n",
    "        #this is to return the whole list of valid words in the input sorted in order of their frequency\n",
    "        lst = (self.preorder_traversal())\n",
    "        #swap the position of the word and its freqeuncy\n",
    "        res = [(sub[1], sub[0]) for sub in lst] \n",
    "        \n",
    "        #This is in response to the first edge case\n",
    "        prefix = prefix.lower()\n",
    "        #This is in reponse to the second edge case\n",
    "        prefix = prefix.replace(\" \",\"\")\n",
    "\n",
    "        \n",
    "        #Create a for loop that goes through each element of the list, which would start from the word that has \n",
    "        #the highest frequency\n",
    "        for i in res:\n",
    "            #If the valid word contains this prefix\n",
    "            if i[0].startswith(prefix) == True:\n",
    "                #return the valid word, because we know that it would be the most common word \n",
    "                #as we go from the highest frequency\n",
    "                return i[0]\n",
    "        #If we cannot find a word that start with this prefix, then we would remind the users  \n",
    "        return \"Cannot find words that start with this prefix\"\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-763fdf92d703d9f8",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "import urllib.request\n",
    "response = urllib.request.urlopen('http://bit.ly/CS110-Shakespeare')\n",
    "bad_chars = [';', ',', '.', '?', '!', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_', '[', ']', '’','“', ':','\"','-', '-','.']\n",
    "\n",
    "trieSH = Trie_Q5()\n",
    "\n",
    "for line in response:\n",
    "    line = line.decode(encoding = 'utf-8')\n",
    "    line = filter(lambda i: i not in bad_chars, line)\n",
    "    words = \"\".join(line).split()\n",
    "    for word in words:\n",
    "        trieSH.insert(word)\n",
    "\n",
    "assert trieSH.autocomplete('hist') == 'history'\n",
    "assert trieSH.autocomplete('en') == 'enter'\n",
    "assert trieSH.autocomplete('cae') == 'caesar'\n",
    "assert trieSH.autocomplete('gen') == 'gentleman'\n",
    "assert trieSH.autocomplete('pen') == 'pen'\n",
    "assert trieSH.autocomplete('tho') == 'thou'\n",
    "assert trieSH.autocomplete('pent') == 'pentapolis'\n",
    "assert trieSH.autocomplete('petr') == 'petruchio'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#The first test case could be autocomplete with the captial letter in the list. \n",
    "#We would change the letter into lowercase in the autocomplete method to make sure that this could work\n",
    "assert trieSH.autocomplete('En') == 'enter'\n",
    "\n",
    "#The second test case could eb autocomplete with Space in the beginning of the list, which \n",
    "#happens a lot when one is typing in the searching engine\n",
    "#We would use replace function in the autocomplete method to make sure this could work\n",
    "assert trieSH.autocomplete(' En') == 'enter'\n",
    "assert trieSH.autocomplete(' E n ') == 'enter'\n",
    "assert trieSH.autocomplete(' En ') == 'enter'\n",
    "\n",
    "#The third test case could be a prefix that isn't a word, to make sure that our method doesn't always return a word\n",
    "#even when there isn't any word that starts with that prefix\n",
    "# assert trieSH.autocomplete('Minerva') == \"Cannot find words that start with this prefix\"\n",
    "# --> turns out Shakespeare did use the word Minerva :)) \n",
    "assert trieSH.autocomplete('intentional') ==  \"Cannot find words that start with this prefix\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluation of my autocomplete function\n",
    "I believe that the time complexity for the autocomplete function would be O(N), where N is the total number of the words being inserted into the list as there are tree non-nested loop in the function\n",
    "1. the worst-case time complexity for preorder-traversal is O(N),\n",
    "3. the worst-case time complexity for the for loop is O(N).\n",
    "Moreover, I have privided three extra test cases to consider for the common mistakes that people ususually make when typing in the search engine. This makes the autocomplete not only time efficident but also practical."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HC Appendix\n",
    "**#organization**\n",
    "I organized my assignment effectively with appropriate language, formatting, and commented my codes so that my audience understands my work easily. Moreover, I used jupyter markdown cells effectively e.g., by making some texts bold and add headings.\n",
    "\n",
    "**#breakitdown**\n",
    "In my thinking about how to break down an input and store them into a tree as well as how I decide to traverse through the tree (recursive vs iterative) to generate the list of unique words in the tree, I effectively break down the bigger problem into a smaller components that lead to an efficient data structure. \n",
    "\n",
    "**#algorithm**\n",
    "I effectively applied algorithmic thinking through the application of #breakitdown and approach the problem correctly and effeicnetly. I also included appropriate commenting to help readers understand what my code is doing. I also effectively justified my choice for the different approach to a problem and analyze as well as analyzed my own algorithm in terms of #codereadability and #complexityanalysis"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Create Assignment",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
